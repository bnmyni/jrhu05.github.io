<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JerryFu&#39;s Blog</title>
  <subtitle>let us do sth interesting!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jrhu05.github.io/"/>
  <updated>2018-04-29T06:06:56.755Z</updated>
  <id>http://jrhu05.github.io/</id>
  
  <author>
    <name>jrhu05</name>
    <email>jrhu05@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用gitment为hexo添加评论模块</title>
    <link href="http://jrhu05.github.io/post/gitment-for-hexo-pamen-theme.html"/>
    <id>http://jrhu05.github.io/post/gitment-for-hexo-pamen-theme.html</id>
    <published>2018-04-29T07:31:13.000Z</published>
    <updated>2018-04-29T06:06:56.755Z</updated>
    
    <content type="html"><![CDATA[<p>　　自从多说倒闭后，一直没有找到适合hexo的评论模块，虽说基本上也没啥人评论来着_<em>(:зゝ∠)</em>。</p>
<p>　　在github闲逛的时候，发现了gitment这个有趣的东东，居然可以把github的Issues转化成博客的评论。</p>
<p>　　gitment只支持github账号登录评论，不过这年头谁还没个gayhub账号啊:-D。</p>
<p>　　项目地址：<a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">https://github.com/imsun/gitment</a></p>
<p>　　中文说明：<a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">https://imsun.net/posts/gitment-introduction/</a></p>
<p>　　搜索了一下网络上hexo对gitment的使用，发现大多数都是Next主题的，没有关于pacmen主题的，因此自己摸索完成了hexo pacmen主题上对gitment的使用方法，分享给大家。</p>
<h1 id="Step1：前期准备工作"><a href="#Step1：前期准备工作" class="headerlink" title="Step1：前期准备工作"></a>Step1：前期准备工作</h1><p>　　首先，因为Gitment是使用的GitHub Issues作为评论系统，在接入Gitment前，需要获得GitHub的授权，获得相应的客户端id和客户端私钥，以备站点使用。</p>
<p>　　OAuth Application注册地址：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a></p>
<p>　　Application name、Homepage URL、Application description可以随便填写</p>
<p>　　Authorization callback URL一定要填写正确的 callback URL（一般是评论页面对应的域名，如 <a href="http://blog.hytcshare.com）。" target="_blank" rel="noopener">http://blog.hytcshare.com）。</a></p>
<p><img src="/img/gitment-for-hexo-pamen-theme/1.png" alt=""></p>
<p>　　注册好后会跳转到OAuth Apps详情页面，复制好Client ID和Client Secret备用</p>
<p><img src="/img/gitment-for-hexo-pamen-theme/2.png" alt=""></p>
<h1 id="Step-2-hexo的Pacman主题配置"><a href="#Step-2-hexo的Pacman主题配置" class="headerlink" title="　　Step 2 hexo的Pacman主题配置"></a>　　Step 2 hexo的Pacman主题配置</h1><p>　　打开pacman主题下的layout/_partial/post目录下的comment.ejs文件，将其内容替换成如下（多说都倒闭了，还留它干啥呢）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (page.comments) &#123; %&gt;</span><br><span class="line">&lt;!-- gitment评论框 start --&gt;</span><br><span class="line">	&lt;div id=&quot;gitment&quot; class=&quot;ds-thread&quot;&gt;&lt;/div&gt;</span><br><span class="line">	&lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;</span><br><span class="line">	&lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">	&lt;script&gt;</span><br><span class="line">	  var gitment = new Gitment(&#123;</span><br><span class="line">	    id: &apos;l&lt;%= page.date %&gt;&apos;, // 可选。建议为&lt;%= page.date %&gt;</span><br><span class="line">	    owner: &apos;jrhu05&apos;, // 可以是你的GitHub用户名，也可以是github id</span><br><span class="line">	    repo: &apos;jrhu05.github.io&apos;, //可以是你的任意一个repo，推荐使用githubpage所在的repo</span><br><span class="line">	    oauth: &#123;</span><br><span class="line">	      client_id: &apos;xxx&apos;,//填入上一步骤复制的Client ID</span><br><span class="line">	      client_secret: &apos;xxxxx&apos;,//填入上一步骤复制的Client Secret</span><br><span class="line">	    &#125;,</span><br><span class="line">	  &#125;)</span><br><span class="line">	  gitment.render(&apos;gitment&apos;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p>
<p>　　至此所有的操作均已经完成。</p>
<p>　　最后你要做的只需hexo g&amp;&amp;hexo d，重新部署一下hexo即可。</p>
<p>　　哒哒，出来啦！评论一下试试吧！</p>
<p><img src="/img/gitment-for-hexo-pamen-theme/5.png" alt=""></p>
<p><img src="/img/gitment-for-hexo-pamen-theme/6.png" alt=""></p>
<p>　　Enjoying it!</p>
<p>　　转载的话请注明出处，给咱新开的小博客添点人气，谢谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　自从多说倒闭后，一直没有找到适合hexo的评论模块，虽说基本上也没啥人评论来着_&lt;em&gt;(:зゝ∠)&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;　　在github闲逛的时候，发现了gitment这个有趣的东东，居然可以把github的Issues转化成博客的评论。&lt;/p&gt;
&lt;p&gt;　　g
    
    </summary>
    
      <category term="研究僧呀" scheme="http://jrhu05.github.io/categories/%E7%A0%94%E7%A9%B6%E5%83%A7%E5%91%80/"/>
    
    
      <category term="hexo评论" scheme="http://jrhu05.github.io/tags/hexo%E8%AF%84%E8%AE%BA/"/>
    
      <category term="gitment" scheme="http://jrhu05.github.io/tags/gitment/"/>
    
      <category term="pacmen" scheme="http://jrhu05.github.io/tags/pacmen/"/>
    
  </entry>
  
  <entry>
    <title>在世界的角落起舞</title>
    <link href="http://jrhu05.github.io/post/dancing-in-the-corner.html"/>
    <id>http://jrhu05.github.io/post/dancing-in-the-corner.html</id>
    <published>2017-10-28T15:26:43.000Z</published>
    <updated>2018-04-29T03:15:30.926Z</updated>
    
    <content type="html"><![CDATA[<p>　　部门里有几个书架，存了不少的书，没事时也会挑上几本翻一翻。一本本的读下去，比较好的一点是能够借阅，在借阅单上填写好便可以带回家看，不像四号楼一楼的基地公共图书馆，只能在专门设立的地点看，不能借阅，形式主义大于实际意义。</p>
<p>　　遇到一本好书是件很令人开心的事情，有很大的运气成分在里面。阿勒泰的角落，很不起眼的一本小书，夹在书堆中不经意很难发现。作者讲述了自己以及其家庭在阿勒泰的生活，多个细碎的故事组成了整本书。如果要问我读完后有什么高大上的想法或者感慨，那倒也没有，就是回想到书中的某些片段会觉得很有趣，很温暖。</p>
<p>　　一方水土养育一方人，在这片土地上成长起来的写作者其笔下的文字也同样会散发出对应的味道。阿勒泰，新疆的最北端，戈壁沙漠、森林雪山，苦寒贫瘠是当地最真实的写照。在她的故事里，这些都有写到。但让我惊奇的是，那片土地上的人民，包括作者自己在内，对生活的热爱。艰苦的生活反而孕育出金子般的心灵。</p>
<p>　　她絮絮叨叨的讲了她们家的兔子，她们家的小卖铺，她外婆，可爱的孩子，来来去去的陌生人，还有很多其他的事情。这些细枝末节的小点，最终汇集成了这本书明亮的底色。对生活细微之处的感受力以及语言的趣味，这样美丽而又干净的文字，在这个躁动的年代里，很难得，同样也很能打动人心。</p>
<p>　　有很多故事对于某个地方的美的描述是来自于追忆，如家乡。而这本书不是的，她对日常生活的点滴记录，本身构成了阿勒泰的美，生活的美。平平而起，没有跌宕起伏的回转，没有扣人心弦的剧情，这种生活究竟包含着什么微言大义，我说不清，但即使面对这样粗粝的生活，如果捧在手里仔细看的话，也可以看得到棱角里折射出的动人光彩。或许生活本应如此。</p>
<p>　　在她的笔下，现实的悲苦和坚硬，都化作了幽默而又温暖的存在，你能读到寂寞，你能读到悲悯，但是更能读到坦然。悲伤往往轻于表达，美好不易言说。不怨天尤人，不高深莫测，也不思考空空荡荡的大问题。就像来串门的邻家女孩，妙趣横生的把她遇到的人和事讲给你听，不做任何点评，故事不经意间便讲完了，然后她蹦蹦跳跳跑开去。留下你一个人，空空的对着外面的世界，觉得有些意犹未尽的东西在脑海里绕啊绕啊。</p>
<p>　　这浑然天成的文字再一次证明，好的文学是对生活与生命的感悟，而不是精雕细琢的技巧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　部门里有几个书架，存了不少的书，没事时也会挑上几本翻一翻。一本本的读下去，比较好的一点是能够借阅，在借阅单上填写好便可以带回家看，不像四号楼一楼的基地公共图书馆，只能在专门设立的地点看，不能借阅，形式主义大于实际意义。&lt;/p&gt;
&lt;p&gt;　　遇到一本好书是件很令人开心的事情
    
    </summary>
    
      <category term="琐事物语" scheme="http://jrhu05.github.io/categories/%E7%90%90%E4%BA%8B%E7%89%A9%E8%AF%AD/"/>
    
    
      <category term="阿勒泰的角落" scheme="http://jrhu05.github.io/tags/%E9%98%BF%E5%8B%92%E6%B3%B0%E7%9A%84%E8%A7%92%E8%90%BD/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-011ContainerWithMostWater</title>
    <link href="http://jrhu05.github.io/post/LeetCode-011ContainerWithMostWater.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-011ContainerWithMostWater.html</id>
    <published>2017-04-13T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:24.763Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>给定 <em>n</em> 个非负整数 <em>a</em>1，<em>a</em>2，…，<em>a</em>n，每个数代表坐标中的一个点 (<em>i</em>, <em>ai</em>) 。画 <em>n</em> 条垂直线，使得垂直线 <em>i</em> 的两个端点分别为 (<em>i</em>, <em>ai</em>) 和 (<em>i</em>, 0)。找出其中的两条线，使得它们与 <em>x</em> 轴共同构成的容器可以容纳最多的水。</p>
<p><strong>注意：</strong>你不能倾斜容器，<em>n</em> 至少是2。</p>
<p><strong>分析</strong></p>
<p>从两端先中间收缩，因为面积取决于第的一边高度和两边间距，一次高度较高的一边向内收缩只会导致总面积变小。故每次只需考虑移动高度较低的一边，直至两边相遇。</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_011ContainerWithMostWater</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(maxArea(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>&#125;));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = height.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            max = Math.max(max, Math.min(height[left], height[right])*(right-left));</span><br><span class="line">            <span class="keyword">if</span>(height[left]&lt;height[right])&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定 &lt;em&gt;n&lt;/em&gt; 个非负整数 &lt;em&gt;a&lt;/em&gt;1，&lt;em&gt;a&lt;/em&gt;2，…，&lt;em&gt;a&lt;/em&gt;n，每个数代表坐标中的一个点 (&lt;em&gt;i&lt;/em&gt;, &lt;em&gt;ai&lt;/em&gt;) 。画 &lt;em&gt;n&lt;/em
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-008StringToIntegerAtoi</title>
    <link href="http://jrhu05.github.io/post/LeetCode-008StringToIntegerAtoi.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-008StringToIntegerAtoi.html</id>
    <published>2017-04-11T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:23.500Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>实现 atoi，将字符串转为整数。</p>
<p>在找到第一个非空字符之前，需要移除掉字符串中的空格字符。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如果第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p>
<p>字符串可以在形成整数的字符后面包括多余的字符，这些字符可以被忽略，它们对于函数没有影响。</p>
<p>当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。</p>
<p>若函数不能执行有效的转换，返回 0。</p>
<p>说明：</p>
<p>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。如果数值超过可表示的范围，则返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p>
<p>示例 1:</p>
<p>输入: “42”<br>输出: 42<br>示例 2:</p>
<p>输入: “   -42”<br>输出: -42<br>解释: 第一个非空白字符为 ‘-‘, 它是一个负号。<br>     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。<br>示例 3:</p>
<p>输入: “4193 with words”<br>输出: 4193<br>解释: 转换截止于数字 ‘3’ ，因为它的下一个字符不为数字。<br>示例 4:</p>
<p>输入: “words and 987”<br>输出: 0<br>解释: 第一个非空字符是 ‘w’, 但它不是数字或正、负号。<br>     因此无法执行有效的转换。<br>示例 5:</p>
<p>输入: “-91283472332”<br>输出: -2147483648<br>解释: 数字 “-91283472332” 超过 32 位有符号整数范围。<br>     因此返回 INT_MIN (−231) 。</p>
<p><strong>分析</strong></p>
<p>注意边界值和特殊情况的考虑，本题不难。</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_008StringToIntegerAtoi</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(myAtoi(<span class="string">"      "</span>));</span><br><span class="line">		System.out.println(myAtoi(<span class="string">"42"</span>));</span><br><span class="line">		System.out.println(myAtoi(<span class="string">"   -42"</span>));</span><br><span class="line">		System.out.println(myAtoi(<span class="string">"4193 with words"</span>));</span><br><span class="line">		System.out.println(myAtoi(<span class="string">"words and 987"</span>));</span><br><span class="line">		System.out.println(myAtoi(<span class="string">"-91283472332"</span>));</span><br><span class="line">		System.out.println(myAtoi(<span class="string">"91283472332"</span>));</span><br><span class="line">		System.out.println(myAtoi(<span class="string">"  -0012a42"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (str.charAt(<span class="number">0</span>)!=<span class="string">' '</span>) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				str=str.substring(<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//	    if (" ".equals(str)) &#123;</span></span><br><span class="line"><span class="comment">//			str="";</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line">	    <span class="keyword">if</span> (str==<span class="keyword">null</span>||str.length()==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	    StringBuffer sb=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">	    <span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line">	    <span class="keyword">if</span> (str.charAt(<span class="number">0</span>)==<span class="string">'+'</span>||str.charAt(<span class="number">0</span>)==<span class="string">'-'</span>) &#123;</span><br><span class="line">			start=<span class="number">1</span>;</span><br><span class="line">			sb.append(str.charAt(<span class="number">0</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; str.length(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Character.isDigit(str.charAt(i))) &#123;</span><br><span class="line">				sb.append(str.charAt(i));</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	    </span><br><span class="line">	    <span class="comment">//System.out.println(sb.toString()+"&lt;---");</span></span><br><span class="line">	    <span class="keyword">try</span> &#123;</span><br><span class="line">			Integer result=(<span class="keyword">int</span>) Double.parseDouble(sb.toString());</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实现 atoi，将字符串转为整数。&lt;/p&gt;
&lt;p&gt;在找到第一个非空字符之前，需要移除掉字符串中的空格字符。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-006ZigzagConversion</title>
    <link href="http://jrhu05.github.io/post/LeetCode-006ZigzagConversion.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-006ZigzagConversion.html</id>
    <published>2017-04-09T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:23.410Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>将字符串 “PAYPALISHIRING” 以Z字形排列成给定的行数：</p>
<p>P    A    H   N<br>A P L S I  I  G<br>Y     I    R<br>之后从左往右，逐行读取字符：”PAHNAPLSIIGYIR”</p>
<p>实现一个将字符串进行指定行数变换的函数:</p>
<p>string convert(string s, int numRows);<br>示例 1:</p>
<p>输入: s = “PAYPALISHIRING”, numRows = 3<br>输出: “PAHNAPLSIIGYIR”<br>示例 2:</p>
<p>输入: s = “PAYPALISHIRING”, numRows = 4<br>输出: “PINALSIGYAHRPI”<br>解释:</p>
<p>P       I         N<br>A   L S      I  G<br>Y A   H R<br>P       I</p>
<p><strong>分析</strong></p>
<p>找规律：假设当前行数是r，总行数R，I(n)表示某行第n个字母在原字符串中的index，n从0开始：</p>
<p>r=1,R时，I(n+1) = I(n)+2(R-1)</p>
<p>1&lt;r&lt;R时，</p>
<p>I(n+1) = I(n)+2(R-r) n为偶数时，</p>
<p>I(n+1) = I(n)+2(r-1) n为奇数 </p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_006ZigzagConversion</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(convert(<span class="string">"PAYPALISHIRING"</span>, <span class="number">3</span>));</span><br><span class="line">		System.out.println(convert(<span class="string">"PAYPALISHIRING"</span>, <span class="number">4</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(s==<span class="keyword">null</span>||s.length()==<span class="number">0</span>||numRows==<span class="number">1</span>||numRows&gt;=s.length()) &#123;  </span><br><span class="line">            <span class="keyword">return</span> s;  </span><br><span class="line">        &#125;  </span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();  </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length()+<span class="number">1</span>;i+=<span class="number">2</span>*(numRows-<span class="number">1</span>)) &#123;  </span><br><span class="line">            sb.append(s.charAt(i-<span class="number">1</span>));  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;numRows;i++) &#123;  </span><br><span class="line">            <span class="keyword">boolean</span> k = <span class="keyword">true</span>;  </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;s.length()+<span class="number">1</span>;j+=(k)?<span class="number">2</span>*(numRows-i):<span class="number">2</span>*(i-<span class="number">1</span>),k=!k) &#123;  </span><br><span class="line">                sb.append(s.charAt(j-<span class="number">1</span>));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=numRows;i&lt;s.length()+<span class="number">1</span>;i+=<span class="number">2</span>*(numRows-<span class="number">1</span>)) &#123;  </span><br><span class="line">            sb.append(s.charAt(i-<span class="number">1</span>));  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> sb.toString();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将字符串 “PAYPALISHIRING” 以Z字形排列成给定的行数：&lt;/p&gt;
&lt;p&gt;P    A    H   N&lt;br&gt;A P L S I  I  G&lt;br&gt;Y     I    R&lt;br&gt;之后从左往右，逐行读取字
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-004LongestPalindromicSubstring</title>
    <link href="http://jrhu05.github.io/post/LeetCode-004LongestPalindromicSubstring.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-004LongestPalindromicSubstring.html</id>
    <published>2017-04-07T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:21.945Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为1000。</p>
<p>示例 1：</p>
<p>输入: “babad”<br>输出: “bab”<br>注意: “aba”也是一个有效答案。<br>示例 2：</p>
<p>输入: “cbbd”<br>输出: “bb”</p>
<p><strong>分析</strong></p>
<p>思路1：最简单的，遍历字符串的<strong>“所有子串”</strong>，并判断每个子串是否为对称回文。可以优化点：从最长的子串开始遍历，一旦找到一个回文，就终止迭代；判断回文采用收缩法。从最外一对字符往中心推进。</p>
<p>思路2：从字符的中心开始，向两边扩散检查回文。这需要维护一个指针，从头开始，以每一个位置为中心遍历一遍。这比暴力遍历所有子串省了很多重复判断。以某个字符为核心一旦探测到边界，更长的的串就都不再考虑。</p>
<p>思路3：Manacher算法</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_004LongestPalindromicSubstring</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//longestPalindrome("cbbd");</span></span><br><span class="line"><span class="comment">//		System.out.println(isPalindrome("aba"));</span></span><br><span class="line"><span class="comment">//		System.out.println(isPalindrome("abba"));</span></span><br><span class="line"><span class="comment">//		System.out.println(isPalindrome("asdasdqeqw"));</span></span><br><span class="line"><span class="comment">//		System.out.println(isPalindrome("a"));</span></span><br><span class="line"><span class="comment">//		System.out.println(isPalindrome("aa"));</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(longestPalindrome(<span class="string">"babad"</span>));</span><br><span class="line">		System.out.println(longestPalindrome(<span class="string">"cbbd"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s==<span class="keyword">null</span>||s.length()&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> s;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//取子串</span></span><br><span class="line">        String longestStr=<span class="string">""</span>;</span><br><span class="line">        <span class="comment">//int maxLong=longestStr.length();</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = s.length(); j &gt;i; j--) &#123;</span><br><span class="line">				<span class="keyword">if</span> (j-i&gt;longestStr.length()) &#123;</span><br><span class="line">					String subStr=s.substring(i, j);</span><br><span class="line">					<span class="comment">//System.out.println(subStr);</span></span><br><span class="line">					<span class="keyword">if</span> (isPalindrome(subStr)) &#123;</span><br><span class="line">						<span class="keyword">if</span> (subStr.length()&gt;longestStr.length()) &#123;</span><br><span class="line">							longestStr=subStr;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">return</span> longestStr;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String subStr)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//aba</span></span><br><span class="line">		<span class="comment">//abba</span></span><br><span class="line">		<span class="keyword">int</span> times=(<span class="keyword">int</span>) Math.ceil(subStr.length()/<span class="number">2.0</span>);</span><br><span class="line">		<span class="comment">//System.out.println(times);</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; subStr.length()/<span class="number">2</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (subStr.charAt(i)!=subStr.charAt(subStr.length()-i-<span class="number">1</span>)) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为1000。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;输入: “babad”&lt;br&gt;输出: “bab”&lt;br&gt;注意: “aba”也是一个有效答案
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-003LongestSubstringWithoutRepeatingCharacters</title>
    <link href="http://jrhu05.github.io/post/LeetCode-003LongestSubstringWithoutRepeatingCharacters.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-003LongestSubstringWithoutRepeatingCharacters.html</id>
    <published>2017-04-05T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:21.454Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>给定一个字符串，找出不含有重复字符的最长子串的长度。</p>
<p>示例：</p>
<p>给定 “abcabcbb” ，没有重复字符的最长子串是 “abc” ，那么长度就是3。</p>
<p>给定 “bbbbb” ，最长的子串就是 “b” ，长度是1。</p>
<p>给定 “pwwkew” ，最长子串是 “wke” ，长度是3。请注意答案必须是一个子串，”pwke” 是 子序列  而不是子串。</p>
<p><strong>分析</strong></p>
<p>注意子串的获取</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_003LongestSubstringWithoutRepeatingCharacters</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		 System.out.println(lengthOfLongestSubstring(<span class="string">"abcabcbb"</span>));<span class="comment">//3</span></span><br><span class="line">		 System.out.println(lengthOfLongestSubstring(<span class="string">"bbbbb"</span>));<span class="comment">//1</span></span><br><span class="line">		 System.out.println(lengthOfLongestSubstring(<span class="string">"pwwkew"</span>));<span class="comment">//3</span></span><br><span class="line">		 System.out.println(lengthOfLongestSubstring(<span class="string">"dvdf"</span>));<span class="comment">//3</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">	        <span class="keyword">if</span> (s==<span class="keyword">null</span>||s.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	        <span class="keyword">if</span> (s.length()==<span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>;</span><br><span class="line">	        <span class="keyword">int</span> max=<span class="number">1</span>;</span><br><span class="line">	        ArrayList&lt;Character&gt; characters=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	        characters.add(s.charAt(i));</span><br><span class="line">	        <span class="keyword">int</span> tempMax=<span class="number">1</span>;</span><br><span class="line">	        <span class="keyword">while</span> (j&lt;s.length()) &#123;</span><br><span class="line">	        	<span class="comment">//dvdf</span></span><br><span class="line">				<span class="keyword">if</span> (!characters.contains(s.charAt(j))) &#123;</span><br><span class="line">					characters.add(s.charAt(j));</span><br><span class="line">					<span class="comment">//System.out.println(s.charAt(j));</span></span><br><span class="line">					tempMax++;</span><br><span class="line">					<span class="comment">//System.out.println("tempMax-&gt;"+tempMax);</span></span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//pwwkew</span></span><br><span class="line">					i++;</span><br><span class="line">					j=i;</span><br><span class="line">					characters=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">					characters.add(s.charAt(j));</span><br><span class="line">					tempMax=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (tempMax&gt;max) &#123;</span><br><span class="line">					max=tempMax;</span><br><span class="line">				&#125;</span><br><span class="line">				j++;</span><br><span class="line">			&#125;</span><br><span class="line">	        <span class="keyword">return</span> max;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定一个字符串，找出不含有重复字符的最长子串的长度。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;给定 “abcabcbb” ，没有重复字符的最长子串是 “abc” ，那么长度就是3。&lt;/p&gt;
&lt;p&gt;给定 “bbbbb” ，最
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-100SameTree</title>
    <link href="http://jrhu05.github.io/post/LeetCode-100SameTree.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-100SameTree.html</id>
    <published>2017-04-03T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:17.194Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>给定两个二叉树，编写一个函数来检验它们是否相同。</p>
<p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p>
<p>示例 1:</p>
<p>输入:       1         1<br>               / \       / \<br>               2   3     2   3</p>
<pre><code>[1,2,3],   [1,2,3]
</code></pre><p>输出: true<br>示例 2:</p>
<p>输入:      1          1<br>               /           \<br>             2             2</p>
<pre><code>[1,2],     [1,null,2]
</code></pre><p>输出: false<br>示例 3:</p>
<p>输入:       1         1<br>               / \       / \<br>             2   1     1   2</p>
<pre><code>[1,2,1],   [1,1,2]
</code></pre><p>输出: false</p>
<p><strong>分析</strong></p>
<p>主要考察二叉树的遍历</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_100SameTree</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		TreeNode t1=<span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">		t1.left=<span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">		t1.right=<span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">		TreeNode t2=<span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">		t2.left=<span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">		t2.right=<span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">		System.out.println(isSameTree(t1, t2));</span><br><span class="line">		</span><br><span class="line">		TreeNode t3=<span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">		t3.left=<span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">		TreeNode t4=<span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">		t4.right=<span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">		System.out.println(isSameTree(t3, t4));</span><br><span class="line">		</span><br><span class="line">		TreeNode t5=<span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">		t5.left=<span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">		t5.right=<span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">		TreeNode t6=<span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">		t6.left=<span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">		t6.right=<span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">		System.out.println(isSameTree(t5, t6));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment">	 * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">	 *     int val;</span></span><br><span class="line"><span class="comment">	 *     TreeNode left;</span></span><br><span class="line"><span class="comment">	 *     TreeNode right;</span></span><br><span class="line"><span class="comment">	 *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment">	 * &#125;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (p==<span class="keyword">null</span>&amp;&amp;q==<span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (p==<span class="keyword">null</span>&amp;&amp;q!=<span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (p!=<span class="keyword">null</span>&amp;&amp;q==<span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">if</span> (p.val!=q.val) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	    <span class="keyword">return</span> isSameTree(p.left, q.left)&amp;&amp;isSameTree(p.right, q.right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定两个二叉树，编写一个函数来检验它们是否相同。&lt;/p&gt;
&lt;p&gt;如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入:       1         1&lt;b
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-771JewelsAndStones</title>
    <link href="http://jrhu05.github.io/post/LeetCode-771JewelsAndStones.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-771JewelsAndStones.html</id>
    <published>2017-04-01T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:20.188Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。</p>
<p>J 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此”a”和”A”是不同类型的石头。</p>
<p>示例 1:</p>
<p>输入: J = “aA”, S = “aAAbbbb”<br>输出: 3<br>示例 2:</p>
<p>输入: J = “z”, S = “ZZ”<br>输出: 0<br>注意:</p>
<p>S 和 J 最多含有50个字母。<br> J 中的字符不重复。</p>
<p><strong>分析</strong></p>
<p>easy，略</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_771JewelsAndStones</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		String j=<span class="string">"z"</span>;</span><br><span class="line">		String s=<span class="string">"ZZ"</span>;</span><br><span class="line">		System.out.println(numJewelsInStones(j, s));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numJewelsInStones</span><span class="params">(String J, String S)</span> </span>&#123;</span><br><span class="line">		 <span class="keyword">char</span>[] jewels=J.toCharArray();</span><br><span class="line">		 <span class="keyword">char</span>[] stones=S.toCharArray();</span><br><span class="line">		 <span class="keyword">int</span> jewelsNumber=<span class="number">0</span>;</span><br><span class="line">		 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; jewels.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; stones.length; k++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (jewels[i]==stones[k]) &#123;</span><br><span class="line">					jewelsNumber++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	     <span class="keyword">return</span> jewelsNumber;</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。&lt;/p&gt;
&lt;p&gt;J 中的字母不重复，J 和 S中的所有字符都是字母。字
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-657JudgeRouteCircle</title>
    <link href="http://jrhu05.github.io/post/LeetCode-657JudgeRouteCircle.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-657JudgeRouteCircle.html</id>
    <published>2017-03-29T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:18.872Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>初始位置 (0, 0) 处有一个机器人。给出它的一系列动作，判断这个机器人的移动路线是否形成一个圆圈，换言之就是判断它是否会移回到原来的位置。</p>
<p>移动顺序由一个字符串表示。每一个动作都是由一个字符来表示的。机器人有效的动作有 R（右），L（左），U（上）和 D（下）。输出应为 true 或 false，表示机器人移动路线是否成圈。</p>
<p>示例 1:</p>
<p>输入: “UD”<br>输出: true</p>
<p>示例 2:</p>
<p>输入: “LL”<br>输出: false</p>
<p><strong>分析</strong></p>
<p>如果能成圈的话，那么UD、LR必须是成对出现的，一种解决思路是统计U、D、L、R出现的次数，如果U、D的次数一样且L、R的次数一样，那么可以成圈</p>
<p>鸡贼的做法是，赋予U/D、L/R正负对应的值，拉开两组值的绝对值差，然后加加减减，最后为0即可，嘻嘻</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_657JudgeRouteCircle</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		String route=<span class="string">"RDRUULLD"</span>;</span><br><span class="line">		System.out.println(judgeCircle(route));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgeCircle</span><span class="params">(String moves)</span> </span>&#123;</span><br><span class="line">	        <span class="keyword">char</span>[] steps=moves.toCharArray();</span><br><span class="line">	        <span class="keyword">int</span> total=<span class="number">0</span>;</span><br><span class="line">	        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; steps.length; i++) &#123;</span><br><span class="line">				<span class="keyword">switch</span> (steps[i]) &#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">'U'</span>:</span><br><span class="line">					total+=<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">					total-=<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">'R'</span>:</span><br><span class="line">					total+=<span class="number">100</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">					total-=<span class="number">100</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">default</span>:</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	        <span class="keyword">if</span> (total==<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;初始位置 (0, 0) 处有一个机器人。给出它的一系列动作，判断这个机器人的移动路线是否形成一个圆圈，换言之就是判断它是否会移回到原来的位置。&lt;/p&gt;
&lt;p&gt;移动顺序由一个字符串表示。每一个动作都是由一个字符来表示的。
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-461HammingDistance</title>
    <link href="http://jrhu05.github.io/post/LeetCode-461HammingDistance.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-461HammingDistance.html</id>
    <published>2017-03-27T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:18.335Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。</p>
<p>给出两个整数 x 和 y，计算它们之间的汉明距离。</p>
<p>注意：<br>0 ≤ x, y &lt; 231.</p>
<p>示例:</p>
<p>输入: x = 1, y = 4</p>
<p>输出: 2</p>
<p>解释:<br>1   (0 0 0 1)<br>4   (0 1 0 0)<br>           ↑     ↑</p>
<p>上面的箭头指出了对应二进制位不同的位置</p>
<p><strong>分析</strong></p>
<p>easy，略</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_461HammingDistance</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(hammingDistance(<span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	    String binX=<span class="keyword">new</span> StringBuffer(Integer.toBinaryString(x)).reverse().toString();</span><br><span class="line">	    String binY=<span class="keyword">new</span> StringBuffer(Integer.toBinaryString(y)).reverse().toString();</span><br><span class="line">	    <span class="comment">//System.out.println(binX);</span></span><br><span class="line">	    <span class="comment">//System.out.println(binY);</span></span><br><span class="line">	    <span class="keyword">int</span> minLength=binX.length()&gt;=binY.length()?binY.length():binX.length();</span><br><span class="line">	    <span class="keyword">int</span> total=<span class="number">0</span>;</span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; minLength; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (binX.charAt(i)!=binY.charAt(i)) &#123;</span><br><span class="line">				total++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	    <span class="comment">//System.out.println("total-&gt;"+total);</span></span><br><span class="line">	    <span class="keyword">int</span> sub=<span class="number">0</span>;</span><br><span class="line">	    String maxStr=(binX.length()&gt;=binY.length())?binX:binY;</span><br><span class="line">	    <span class="comment">//System.out.println(minLength+"--&gt;"+maxStr.length());</span></span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> i = minLength; i &lt; maxStr.length(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (maxStr.charAt(i)!=<span class="string">'0'</span>) &#123;</span><br><span class="line">				sub++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	   <span class="comment">// System.out.println("sub-&gt;"+sub);</span></span><br><span class="line">	    <span class="keyword">return</span> total+sub;</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。&lt;/p&gt;
&lt;p&gt;给出两个整数 x 和 y，计算它们之间的汉明距离。&lt;/p&gt;
&lt;p&gt;注意：&lt;br&gt;0 ≤ x, y &amp;lt; 231.&lt;/p&gt;
&lt;p&gt;示
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-088MergeSortedArray</title>
    <link href="http://jrhu05.github.io/post/LeetCode-088MergeSortedArray.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-088MergeSortedArray.html</id>
    <published>2017-03-25T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:17.016Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1中，使得 num1 成为一个有序数组。</p>
<p>注意:</p>
<p>你可以假设 nums1有足够的空间（空间大小大于或等于m + n）来保存 nums2 中的元素。在 nums1 和 nums2 中初始化的元素的数量分别是 m 和 n。</p>
<p><strong>分析</strong></p>
<p>注意考虑如何向num1数组适当位置插入两个数组的数，可以从后向前考虑，优先放置num1数组中的数，这就无需移位处理。此外因为数组本身有序，所以最后只需要考虑num2长度比num1长度大的情况，即代码中的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">	            nums1[k--] = nums2[j--];</span><br><span class="line">	        &#125;</span><br></pre></td></tr></table></figure>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_088MergeSortedArray</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//		int[] num1=new int[10];</span></span><br><span class="line"><span class="comment">//		num1[0]=1;</span></span><br><span class="line"><span class="comment">//		num1[1]=1;</span></span><br><span class="line"><span class="comment">//		num1[2]=2;</span></span><br><span class="line"><span class="comment">//		num1[3]=3;</span></span><br><span class="line"><span class="comment">//		num1[4]=5;</span></span><br><span class="line"><span class="comment">//		int[] num2=new int[] &#123;1,2,4,5,10&#125;;</span></span><br><span class="line"><span class="comment">//		merge(num1, 10, num2, 5);</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span>[] num1=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>];</span><br><span class="line">		num1[<span class="number">0</span>]=-<span class="number">1</span>;</span><br><span class="line">		num1[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		num1[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">		num1[<span class="number">3</span>]=<span class="number">3</span>;</span><br><span class="line">		num1[<span class="number">4</span>]=<span class="number">3</span>;</span><br><span class="line">		num1[<span class="number">5</span>]=<span class="number">3</span>;</span><br><span class="line">		<span class="keyword">int</span>[] num2=<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>&#125;;</span><br><span class="line">		merge(num1, <span class="number">6</span>, num2, <span class="number">3</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">		 <span class="keyword">int</span> i = m -<span class="number">1</span>;</span><br><span class="line">	        <span class="keyword">int</span> j = n -<span class="number">1</span>;</span><br><span class="line">	        <span class="keyword">int</span> k = m + n -<span class="number">1</span>;</span><br><span class="line">	        <span class="keyword">while</span> ( i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">	            <span class="keyword">if</span> (nums1[i] &gt; nums2[j])&#123;</span><br><span class="line">	                nums1[k--] = nums1[i--];</span><br><span class="line">	            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	                nums1[k--] = nums2[j--];</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">while</span> ( j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">	            nums1[k--] = nums2[j--];</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1中，使得 num1 成为一个有序数组。&lt;/p&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;p&gt;你可以假设 nums1有足够的空间（空间大小大于或等于m 
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-083RemoveDuplicatesFromSortedList</title>
    <link href="http://jrhu05.github.io/post/LeetCode-083RemoveDuplicatesFromSortedList.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-083RemoveDuplicatesFromSortedList.html</id>
    <published>2017-03-23T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:15.407Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>给定一个排序链表，删除所有重复的元素使得每个元素只留下一个。<br>案例：<br>给定 1-&gt;1-&gt;2，返回 1-&gt;2<br>给定 1-&gt;1-&gt;2-&gt;3-&gt;3，返回 1-&gt;2-&gt;3</p>
<p><strong>分析</strong></p>
<p>easy，略</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_083RemoveDuplicatesFromSortedList</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//		ListNode head=new ListNode(1);</span></span><br><span class="line"><span class="comment">//		head.next=new ListNode(1);</span></span><br><span class="line"><span class="comment">//		head.next.next=new ListNode(2);</span></span><br><span class="line"><span class="comment">//		ListNode result=deleteDuplicates(head);</span></span><br><span class="line"><span class="comment">//		while (result.next!=null) &#123;</span></span><br><span class="line"><span class="comment">//			System.out.println(result.val);</span></span><br><span class="line"><span class="comment">//			result=result.next;</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line"><span class="comment">//		System.out.println(result.val);</span></span><br><span class="line"><span class="comment">//		System.out.println("=================");</span></span><br><span class="line">		<span class="comment">//给定 1-&gt;1-&gt;2-&gt;3-&gt;3，返回 1-&gt;2-&gt;3</span></span><br><span class="line">		ListNode head2=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">		head2.next=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">		head2.next.next=<span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">		head2.next.next.next=<span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">		head2.next.next.next.next=<span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">		 ListNode result=deleteDuplicates(head2);</span><br><span class="line">		 System.out.println(result);</span><br><span class="line">		<span class="keyword">while</span> (result.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line">			System.out.println(result.val);</span><br><span class="line">			result=result.next;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(result.val);</span><br><span class="line">		</span><br><span class="line"><span class="comment">//		ListNode head3=new ListNode(1);</span></span><br><span class="line"><span class="comment">//		head3.next=new ListNode(1);</span></span><br><span class="line"><span class="comment">//		head3.next.next=new ListNode(1);</span></span><br><span class="line"><span class="comment">//		ListNode result=deleteDuplicates(head3);</span></span><br><span class="line"><span class="comment">//		 System.out.println(result);</span></span><br><span class="line"><span class="comment">//		while (result.next!=null) &#123;</span></span><br><span class="line"><span class="comment">//			System.out.println(result.val);</span></span><br><span class="line"><span class="comment">//			result=result.next;</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line"><span class="comment">//		System.out.println(result.val);</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">	 * public class ListNode &#123;</span></span><br><span class="line"><span class="comment">	 *     int val;</span></span><br><span class="line"><span class="comment">	 *     ListNode next;</span></span><br><span class="line"><span class="comment">	 *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment">	 * &#125;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	 <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">	        <span class="keyword">if</span> (head==<span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	        <span class="keyword">if</span> (head.next==<span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> head;</span><br><span class="line">			&#125;</span><br><span class="line">	        <span class="keyword">int</span> temp=head.val;</span><br><span class="line">	        ListNode result=head;</span><br><span class="line">	        <span class="keyword">while</span> (head!=<span class="keyword">null</span>&amp;&amp;head.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (head.next.val==temp) &#123;</span><br><span class="line">					head.next=head.next.next;</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					temp=head.next.val;</span><br><span class="line">					head=head.next;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	        <span class="keyword">return</span> result;</span><br><span class="line">	  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定一个排序链表，删除所有重复的元素使得每个元素只留下一个。&lt;br&gt;案例：&lt;br&gt;给定 1-&amp;gt;1-&amp;gt;2，返回 1-&amp;gt;2&lt;br&gt;给定 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;3，返回 1-&amp;gt
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-070ClimbingStairs</title>
    <link href="http://jrhu05.github.io/post/LeetCode-070ClimbingStairs.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-070ClimbingStairs.html</id>
    <published>2017-03-21T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:14.771Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>你正在爬楼梯。需要 n 步你才能到达顶部。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方式可以爬到楼顶呢？</p>
<p>注意：给定 n 将是一个正整数。<br>示例 1：<br>输入： 2<br>输出： 2<br>说明： 有两种方法可以爬到顶端。</p>
<p>1.1 步 + 1 步</p>
<p>2.2 步</p>
<p>示例 2：<br>输入： 3<br>输出： 3<br>说明： 有三种方法可以爬到顶端。</p>
<p>1.1 步 + 1 步 + 1 步</p>
<p>2.1 步 + 2 步</p>
<p>3.2 步 + 1 步</p>
<p><strong>分析</strong></p>
<p>嗯，有点意思。</p>
<p>1个台阶是1种方法，2个台阶是2种方法，3个台阶是3种方法，4个台阶5种方法，</p>
<p>1,2,3,5</p>
<p>有点眼熟。</p>
<p>啊哈，斐波那契数列！</p>
<p>换着花样考</p>
<p>f(n)=f(n-1)+f(n-2)</p>
<p>递归法求解效率不好，太low了，直接用非递归法求解吧！</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_070ClimbingStairs</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(climbStairs(<span class="number">1</span>));</span><br><span class="line">		System.out.println(climbStairs(<span class="number">2</span>));</span><br><span class="line">		System.out.println(climbStairs(<span class="number">3</span>));</span><br><span class="line">		System.out.println(climbStairs(<span class="number">4</span>));</span><br><span class="line">		System.out.println(climbStairs(<span class="number">5</span>));</span><br><span class="line">		System.out.println(climbStairs(<span class="number">6</span>));</span><br><span class="line">		System.out.println(climbStairs(<span class="number">7</span>));</span><br><span class="line">		System.out.println(climbStairs(<span class="number">8</span>));</span><br><span class="line">		System.out.println(climbStairs(<span class="number">9</span>));</span><br><span class="line">		System.out.println(climbStairs(<span class="number">10</span>));</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    	 <span class="keyword">int</span> last=<span class="number">1</span>,lastlast=<span class="number">1</span>,now=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">if</span>(n==<span class="number">0</span>||n==<span class="number">1</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                 now=last+lastlast;</span><br><span class="line">                 lastlast=last;</span><br><span class="line">                 last=now;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> now;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你正在爬楼梯。需要 n 步你才能到达顶部。&lt;/p&gt;
&lt;p&gt;每次你可以爬 1 或 2 个台阶。你有多少种不同的方式可以爬到楼顶呢？&lt;/p&gt;
&lt;p&gt;注意：给定 n 将是一个正整数。&lt;br&gt;示例 1：&lt;br&gt;输入： 2&lt;br
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-069Sqrtx</title>
    <link href="http://jrhu05.github.io/post/LeetCode-069Sqrtx.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-069Sqrtx.html</id>
    <published>2017-03-19T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:13.666Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>实现 int sqrt(int x) 函数。</p>
<p>计算并返回 x 的平方根。</p>
<p>x 保证是一个非负整数。</p>
<p>案例 1:<br>输入: 4<br>输出: 2<br>案例 2:<br>输入: 8<br>输出: 2<br>说明: 8 的平方根是 2.82842…, 由于我们想返回一个整数，小数部分将被舍去</p>
<p><strong>分析</strong></p>
<p>题目要求的是整数，所以就没必要用二分逼近法或牛顿迭代法，怎么简单怎么来_<em>(:з」∠)</em></p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_069Sqrtx</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(mySqrt(<span class="number">1</span>));</span><br><span class="line">		System.out.println(mySqrt(<span class="number">2</span>));</span><br><span class="line">		System.out.println(mySqrt(<span class="number">3</span>));</span><br><span class="line">		System.out.println(mySqrt(<span class="number">4</span>));</span><br><span class="line">		System.out.println(mySqrt(<span class="number">5</span>));</span><br><span class="line">		System.out.println(mySqrt(<span class="number">6</span>));</span><br><span class="line">		System.out.println(mySqrt(<span class="number">7</span>));</span><br><span class="line">		System.out.println(mySqrt(<span class="number">8</span>));</span><br><span class="line">		System.out.println(mySqrt(<span class="number">9</span>));</span><br><span class="line">		System.out.println(mySqrt(<span class="number">1024</span>));</span><br><span class="line">		System.out.println(mySqrt(<span class="number">2147483647</span>));</span><br><span class="line">		System.out.println(<span class="number">46340</span>*<span class="number">46340</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">long</span> xlong=x;</span><br><span class="line">		<span class="keyword">if</span> (x==<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>;i&lt;=x/<span class="number">2</span>+<span class="number">1</span>;i++) &#123;</span><br><span class="line">	    	<span class="keyword">if</span> (i*i==x) &#123;</span><br><span class="line">				<span class="keyword">return</span> (<span class="keyword">int</span>) i;</span><br><span class="line">			&#125;</span><br><span class="line">	    	<span class="keyword">if</span> (i*i&gt;x) &#123;</span><br><span class="line">				<span class="keyword">return</span> (<span class="keyword">int</span>) (i-<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">	    	<span class="comment">//System.out.println("i*i="+i*i);</span></span><br><span class="line">	    &#125; </span><br><span class="line">	    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实现 int sqrt(int x) 函数。&lt;/p&gt;
&lt;p&gt;计算并返回 x 的平方根。&lt;/p&gt;
&lt;p&gt;x 保证是一个非负整数。&lt;/p&gt;
&lt;p&gt;案例 1:&lt;br&gt;输入: 4&lt;br&gt;输出: 2&lt;br&gt;案例 2:&lt;br&gt;输入
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-067AddBinary</title>
    <link href="http://jrhu05.github.io/post/LeetCode-067AddBinary.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-067AddBinary.html</id>
    <published>2017-03-17T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:13.042Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>给定两个二进制字符串，返回他们的和（用二进制表示）。</p>
<p>案例：<br>a = “11”<br>b = “1”<br>返回 “100” 。<br>考虑进位，考虑最后一项的进位 </p>
<p> 0+0 = 0 不需要进位 </p>
<p>0+1 = 1 不需要进位 </p>
<p>1+1 =0  进位 1 </p>
<p>同时注意 </p>
<p>低位进1，高位时1+1的情况，直接加就是3了，这个需要进位1 ，原位的结果也是1的情况 </p>
<p><strong>分析</strong></p>
<p>注意考虑对较长的二进制数运算的支持，此外还需要考虑两个二进制位串不等长的处理</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_067AddBinary</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		String a=<span class="string">"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101"</span>;</span><br><span class="line">		String b=<span class="string">"110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011"</span>;</span><br><span class="line">		System.out.println(addBinary(a, b));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">addBinary</span><span class="params">(String a, String b)</span> </span>&#123; </span><br><span class="line">		String result = <span class="string">""</span>;  </span><br><span class="line">	    <span class="keyword">int</span> aLen = a.length() - <span class="number">1</span>;  </span><br><span class="line">	    <span class="keyword">int</span> bLen = b.length() - <span class="number">1</span>;  </span><br><span class="line">	    <span class="keyword">int</span> sum = <span class="number">0</span>;  </span><br><span class="line">	    <span class="keyword">while</span>(aLen&gt;=<span class="number">0</span> || bLen&gt;=<span class="number">0</span>)&#123;  </span><br><span class="line">	        <span class="keyword">if</span>(aLen&gt;=<span class="number">0</span>)&#123;  </span><br><span class="line">	            sum +=Integer.parseInt(a.substring(aLen,aLen+<span class="number">1</span>));  </span><br><span class="line">	            aLen--;  </span><br><span class="line">	        &#125;  </span><br><span class="line">	        <span class="keyword">if</span>(bLen&gt;=<span class="number">0</span>)&#123;  </span><br><span class="line">	            sum +=Integer.parseInt(b.substring(bLen,bLen+<span class="number">1</span>));  </span><br><span class="line">	            bLen--;  </span><br><span class="line">	        &#125;  </span><br><span class="line">	        <span class="keyword">if</span>(sum==<span class="number">2</span>)&#123;  </span><br><span class="line">	            result = <span class="string">"0"</span> + result;  </span><br><span class="line">	            sum=<span class="number">1</span>;  </span><br><span class="line">	        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum==<span class="number">0</span> || sum==<span class="number">1</span>) &#123;  </span><br><span class="line">	            result = sum +<span class="string">""</span> + result;  </span><br><span class="line">	            sum = <span class="number">0</span>;  </span><br><span class="line">	        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum==<span class="number">3</span>)&#123;  </span><br><span class="line">	            result = <span class="string">"1"</span> + result;  </span><br><span class="line">	            sum = <span class="number">1</span>;  </span><br><span class="line">	        &#125;  </span><br><span class="line">	    &#125;  </span><br><span class="line">	    <span class="keyword">if</span>(sum==<span class="number">1</span>)  </span><br><span class="line">	        result = <span class="string">"1"</span> + result;  </span><br><span class="line">	    <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定两个二进制字符串，返回他们的和（用二进制表示）。&lt;/p&gt;
&lt;p&gt;案例：&lt;br&gt;a = “11”&lt;br&gt;b = “1”&lt;br&gt;返回 “100” 。&lt;br&gt;考虑进位，考虑最后一项的进位 &lt;/p&gt;
&lt;p&gt; 0+0 = 0
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-066PlusOne</title>
    <link href="http://jrhu05.github.io/post/LeetCode-066PlusOne.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-066PlusOne.html</id>
    <published>2017-03-15T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:11.082Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>给定一个非负整数组成的非空数组，给整数加一。</p>
<p>可以假设整数不包含任何前导零，除了数字0本身。</p>
<p>最高位数字存放在列表的首位。</p>
<p><strong>分析</strong></p>
<p>除了考虑各个进位外还需要注意考虑是否有最高位的进位，如果最高位有进位，那么原各个位比为9，除此之外不需要考虑数组会增大的情况。</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_066PlusOne</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(Arrays.toString(plusOne(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>,<span class="number">9</span>,<span class="number">9</span>&#125;)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">	       <span class="keyword">int</span> carry = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">for</span> (<span class="keyword">int</span> i = digits.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">	            <span class="keyword">if</span> (carry == <span class="number">0</span>) &#123;</span><br><span class="line">	                <span class="keyword">return</span> digits;</span><br><span class="line">	            &#125;</span><br><span class="line">	            <span class="keyword">int</span> tmp = digits[i] + carry;</span><br><span class="line">	            carry = tmp / <span class="number">10</span>;</span><br><span class="line">	            digits[i] = tmp % <span class="number">10</span>;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">if</span> (carry != <span class="number">0</span>) &#123;</span><br><span class="line">	            <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[digits.length + <span class="number">1</span>];</span><br><span class="line">	            result[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	            <span class="keyword">return</span> result;</span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">return</span> digits;</span><br><span class="line">	    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定一个非负整数组成的非空数组，给整数加一。&lt;/p&gt;
&lt;p&gt;可以假设整数不包含任何前导零，除了数字0本身。&lt;/p&gt;
&lt;p&gt;最高位数字存放在列表的首位。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-058Length0fLastWord</title>
    <link href="http://jrhu05.github.io/post/LeetCode-058Length0fLastWord.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-058Length0fLastWord.html</id>
    <published>2017-03-13T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:11.777Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>给定一个字符串， 包含大小写字母、空格 ‘ ‘，请返回其最后一个单词的长度。</p>
<p>如果不存在最后一个单词，请返回 0 。</p>
<p>注意事项：一个单词的界定是，由字母组成，但不包含任何的空格。</p>
<p>案例:</p>
<p>输入: “Hello World”<br>输出: 5</p>
<p><strong>分析</strong></p>
<p>判断起来不难，但是要注意一些特殊的输入处理，如“”，”asd  “等</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_058Length0fLastWord</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(lengthOfLastWord(<span class="string">"Hello World"</span>));</span><br><span class="line">		System.out.println(lengthOfLastWord(<span class="string">"hello"</span>));</span><br><span class="line">		System.out.println(lengthOfLastWord(<span class="string">"Hello World cat"</span>));</span><br><span class="line">		System.out.println(lengthOfLastWord(<span class="string">""</span>));</span><br><span class="line">		System.out.println(lengthOfLastWord(<span class="string">"a"</span>));</span><br><span class="line">		System.out.println(lengthOfLastWord(<span class="string">"asd  "</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (s.endsWith(<span class="string">" "</span>)) &#123;</span><br><span class="line">			s=s.substring(<span class="number">0</span>,s.length()-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (s.equals(<span class="string">" "</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!s.contains(<span class="string">" "</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> s.length();</span><br><span class="line">		&#125;</span><br><span class="line">	      <span class="keyword">int</span> pos=s.lastIndexOf(<span class="string">" "</span>);</span><br><span class="line">	      <span class="keyword">return</span> s.length()-pos-<span class="number">1</span>;</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定一个字符串， 包含大小写字母、空格 ‘ ‘，请返回其最后一个单词的长度。&lt;/p&gt;
&lt;p&gt;如果不存在最后一个单词，请返回 0 。&lt;/p&gt;
&lt;p&gt;注意事项：一个单词的界定是，由字母组成，但不包含任何的空格。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-053MaximumSubarray</title>
    <link href="http://jrhu05.github.io/post/LeetCode-053MaximumSubarray.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-053MaximumSubarray.html</id>
    <published>2017-03-11T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:09.686Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>给定一个序列（至少含有 1 个数），从该序列中寻找一个连续的子序列，使得子序列的和最大。<br>例如，给定序列 [-2,1,-3,4,-1,2,1,-5,4]，<br>连续子序列 [4,-1,2,1] 的和最大，为 6。<br>扩展练习:<br>若你已实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</p>
<p><strong>分析</strong></p>
<p>easy，略</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_053MaximumSubarray</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(maxSubArray(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">2</span>,<span class="number">1</span>&#125;));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//[-2,1,-3,4,-1,2,1,-5,4]</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (nums.length==<span class="number">1l</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	      <span class="keyword">int</span> max=Integer.MIN_VALUE;</span><br><span class="line">	      <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">	    	sum=nums[i];</span><br><span class="line">	    	<span class="keyword">if</span> (sum&gt;max) &#123;</span><br><span class="line">				max=sum;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">				sum+=nums[j];</span><br><span class="line">				<span class="keyword">if</span> (sum&gt;max) &#123;</span><br><span class="line">					max=sum;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	      <span class="keyword">return</span> max;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定一个序列（至少含有 1 个数），从该序列中寻找一个连续的子序列，使得子序列的和最大。&lt;br&gt;例如，给定序列 [-2,1,-3,4,-1,2,1,-5,4]，&lt;br&gt;连续子序列 [4,-1,2,1] 的和最大，为 6
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记-LeetCode刷题笔记-038CountAndSay</title>
    <link href="http://jrhu05.github.io/post/LeetCode-038CountAndSay.html"/>
    <id>http://jrhu05.github.io/post/LeetCode-038CountAndSay.html</id>
    <published>2017-03-09T01:00:37.000Z</published>
    <updated>2018-05-12T01:53:09.529Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong></p>
<p>数数并说序列是一个整数序列，第二项起每一项的值为对前一项的计数，其前五项如下：</p>
<p>1.1</p>
<p>2.11</p>
<p>3.21</p>
<p>4.1211</p>
<p>5.111221<br>1 被读作 “一个一” 即 11。<br>11 被读作  “两个一” 即 21。<br>21 被读作  “一个二 和 一个一” 即 1211。<br>给一个正整数 n ，输出数数并说序列的第 n 项。<br>注意：该整数序列的每项都输出为字符串。<br>例 1:<br>输入: 1<br>输出: “1”<br>例 2:<br>输入: 4<br>输出: “1211”<br>The following are the terms from n=1 to n=10 of the count-and-say sequence:</p>
<p>1.1</p>
<p>2.11</p>
<p>3.21</p>
<p>4.1211</p>
<p>5.111221 </p>
<p>6.312211</p>
<p>7.13112221</p>
<p>8.1113213211</p>
<p>9.31131211131221</p>
<p>10.13211311123113112211</p>
<p><strong>分析</strong></p>
<p>递归求解</p>
<p><strong>解答：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_038CountAndSay</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//read("1211");</span></span><br><span class="line">		System.out.println(countAndSay(<span class="number">9</span>));</span><br><span class="line">		<span class="comment">//countAndSay(3);</span></span><br><span class="line">	&#125;</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	    <span class="keyword">return</span> read(countAndSay(n-<span class="number">1</span>));</span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 </span><br><span class="line">	 <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">(String needToReadStr)</span> </span>&#123;</span><br><span class="line">		 <span class="comment">//11</span></span><br><span class="line">		 <span class="keyword">int</span>[] need2Read=<span class="keyword">new</span> <span class="keyword">int</span>[needToReadStr.length()];</span><br><span class="line">		 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; needToReadStr.length(); i++) &#123;</span><br><span class="line">			need2Read[i]=Integer.valueOf(needToReadStr.charAt(i)+<span class="string">""</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		 <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">		 StringBuffer sb=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">		 <span class="keyword">while</span> (index&lt;need2Read.length) &#123;</span><br><span class="line">			<span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">			<span class="comment">//11</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; need2Read.length; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (need2Read[index]==need2Read[i]) &#123;</span><br><span class="line"><span class="comment">//					System.out.println("index--&gt;"+index+"--&gt;"+need2Read[index]);</span></span><br><span class="line"><span class="comment">//					System.out.println("i--&gt;"+i+"--&gt;"+need2Read[i]);</span></span><br><span class="line">					count++;</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					index=i;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (index==need2Read.length-<span class="number">1</span>) &#123;</span><br><span class="line">					index=need2Read.length;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (i==need2Read.length-<span class="number">1</span>) &#123;</span><br><span class="line">					index=need2Read.length;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (index==<span class="number">0</span>) &#123;</span><br><span class="line">				sb.append(count).append(need2Read[index]);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				sb.append(count).append(need2Read[index-<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		 <span class="keyword">return</span> sb.toString();</span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数数并说序列是一个整数序列，第二项起每一项的值为对前一项的计数，其前五项如下：&lt;/p&gt;
&lt;p&gt;1.1&lt;/p&gt;
&lt;p&gt;2.11&lt;/p&gt;
&lt;p&gt;3.21&lt;/p&gt;
&lt;p&gt;4.1211&lt;/p&gt;
&lt;p&gt;5.111221&lt;br&gt;1
    
    </summary>
    
      <category term="算法寻径" scheme="http://jrhu05.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BB%E5%BE%84/"/>
    
    
      <category term="LeetCode" scheme="http://jrhu05.github.io/tags/LeetCode/"/>
    
  </entry>
  
</feed>
